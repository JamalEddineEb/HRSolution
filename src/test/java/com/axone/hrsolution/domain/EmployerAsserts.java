package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerAllPropertiesEquals(Employer expected, Employer actual) {
        assertEmployerAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerAllUpdatablePropertiesEquals(Employer expected, Employer actual) {
        assertEmployerUpdatableFieldsEquals(expected, actual);
        assertEmployerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertEmployerMapsIdRelationshipPersistedValue(Employer entityToPersist, Employer persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerAutoGeneratedPropertiesEquals(Employer expected, Employer actual) {
        assertThat(expected)
            .as("Verify Employer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerUpdatableFieldsEquals(Employer expected, Employer actual) {
        assertThat(expected)
            .as("Verify Employer relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getLinkedinUrl()).as("check linkedinUrl").isEqualTo(actual.getLinkedinUrl()))
            .satisfies(e -> assertThat(e.getScore()).as("check score").isEqualTo(actual.getScore()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployerUpdatableRelationshipsEquals(Employer expected, Employer actual) {
        assertThat(expected)
            .as("Verify Employer relationships")
            .satisfies(e -> assertThat(e.getWallet()).as("check wallet").isEqualTo(actual.getWallet()));
    }
}
