package com.axone.hrsolution.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdminAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminAllPropertiesEquals(Admin expected, Admin actual) {
        assertAdminAutoGeneratedPropertiesEquals(expected, actual);
        assertAdminAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminAllUpdatablePropertiesEquals(Admin expected, Admin actual) {
        assertAdminUpdatableFieldsEquals(expected, actual);
        assertAdminUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertAdminMapsIdRelationshipPersistedValue(Admin entityToPersist, Admin persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminAutoGeneratedPropertiesEquals(Admin expected, Admin actual) {
        assertThat(expected)
            .as("Verify Admin auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminUpdatableFieldsEquals(Admin expected, Admin actual) {
        assertThat(expected)
            .as("Verify Admin relevant properties")
            .satisfies(e -> assertThat(e.getSystemName()).as("check systemName").isEqualTo(actual.getSystemName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminUpdatableRelationshipsEquals(Admin expected, Admin actual) {
        assertThat(expected)
            .as("Verify Admin relationships")
            .satisfies(e -> assertThat(e.getSystemWallet()).as("check systemWallet").isEqualTo(actual.getSystemWallet()));
    }
}
